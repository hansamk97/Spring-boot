1. 기본 Q-Type 활용
 - Q클래스 인스턴스를 사용하는 2가지 방법
 - QMember qMember = new QMember("m");	// 별칭을 직접 지정
 - QMember qMember = QMember.member;	// 기본 인스턴스 사용

2. JPQL이 제공하는 검색 조건 제공
 - member.username.eq("member1")		// username = 'member1'
 - member.username.ne("member1")	// username != 'member1'
 - member.username.eq("member1").not()	// username != 'member1'

 - member.username.isNotNull() 		// 이름이 is not null
 
 - member.age.in(10, 20)		// age in (10,20)
 - member.age.notIn(10,20)		// age not in (10,20)
 - member.age.between(10,30)		// between 10,30

 - member.age.goe(30)			// age >= 30
 - member.age.gt(30)			// age > 30
 - member.age.loe(30)			// age <= 30
 - membet.age.lt(30)			// age < 30

 - member.username.like("member%")	// like검색
 - member.username.contains("member")	// like '%member%' 검색
 - member.username.startsWith("member")	// like 'member%' 검색

3. 결과 조회
 - fetch()	: 리스트 조회, 데이터 없으면 빈 리스트 반환
 - fetchOne()	: 단 건 조회
	-> 결과가 없으면 	: null
	-> 결과가 둘 이상이면 : NotUniqueResultException
 - fetchFirst()  : limit(1).fetchOne()
 - fetchResults() : 페이징 정보를 포함, total count 쿼리 추가 실행
 - fetchCount() : count쿼리로 변경해서 count수 조회

4. 정렬
 - desc(), asc() : 일반 정렬
 - nullsLast(), nullsFirst() : null 데이터 순서 부여

5. 집합
 - count(m)		// 회원수
 - sum(m.age)		// 나이합
 - avg(m.age)		// 평균 나이
 - max(m.age)		// 최대 나이
 - min(m.age)		// 최소 나이
 
6. 조인 - on절
 
7. 서브쿼리
 - from절에 서브 쿼리 한계가 존재한다.

8. Case문

9. 프로젝션과 결과 반환
 - List<String>
 - List<Member>
 - List<Tuple>	: 대상이 둘 이상일 때 
 - 결과값 반환 : DTO

 9-1. 결과값 반환 QueryDSL
 - 프로퍼티 접근
 - 필드 직접 접근
 - 생성자 사용











